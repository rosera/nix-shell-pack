import os
import chromadb
from chromadb.utils import embedding_functions
from langchain.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.llms import Ollama
from langchain.chains import RetrievalQA

def rag_pdf_qa(pdf_path, question, ollama_model="llama2"):
    """
    Performs Retrieval Augmented Generation (RAG) on a PDF using Ollama and ChromaDB.

    Args:
        pdf_path (str): Path to the PDF file.
        question (str): The question to ask.
        ollama_model (str): The Ollama model to use. Defaults to "llama2".

    Returns:
        str: The answer generated by the model.
    """

    try:
        # 1. Load the PDF
        loader = PyPDFLoader(pdf_path)
        documents = loader.load()

        # 2. Split the text into chunks
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
        texts = text_splitter.split_documents(documents)

        # 3. Create embeddings and store in ChromaDB
        client = chromadb.Client()  # In-memory client for simplicity
        collection = client.create_collection("pdf_collection")

        # embedding_function = embedding_functions.SentenceTransformerEmbeddingFunction(model_name="all-MiniLM-L6-v2")
        embedding_function = embedding_functions.SentenceTransformerEmbeddingFunction(model_name="all-MiniLM-L6-v2")

        for i, text in enumerate(texts):
            embeddings = embedding_function([text.page_content])
            collection.add(
                embeddings=embeddings,
                documents=[text.page_content],
                ids=[f"doc_{i}"]
            )

        # 4. Initialize Ollama LLM
        llm = Ollama(model=ollama_model)

        # 5. Create RetrievalQA chain
        retriever = collection.as_retriever()
        qa = RetrievalQA.from_chain_type(llm=llm, chain_type="stuff", retriever=retriever)

        # 6. Run the query
        result = qa.run(question)
        return result

    except Exception as e:
        return f"An error occurred: {e}"

# Example usage:
if __name__ == "__main__":
    pdf_file = "datasets/CKAD_v132.pdf" # Replace with your pdf file path
    query = "What is the main topic of this document?"

    # Ensure the PDF file exists
    if not os.path.exists(pdf_file):
        print(f"Error: PDF file '{pdf_file}' not found.")
    else:

        answer = rag_pdf_qa(pdf_file, query)
        print("Question:", query)
        print("Answer:", answer)
